;iButton Splitter
;Desi Quintans
;
;1. Install AutoHotKey (https://www.autohotkey.com/, Windows only).
;2. Drop the .csv file generated by the TDHC software onto _iButton Splitter.ahk.
;3. The file will be divided into separate .csv files, one file per iButton.
;4. Files are placed into iButton Splitter output/, named by iButton serial number and the date the iButton was recorded.
;5. If you want to automatically convert serial numbers to some other human-readable name, open _iButton Splitter.ahk in a text editor
;   (e.g. Notepad) and go to the section around line 180 that looks like this:
;
;  		Case-C200000038AFD421:
;   			SerialNum1 = BIL-BPA Air
;   			Break
;		    Case-1200000038A54021:
;   			SerialNum1 = BIL-BPA Soil
;   			Break
;
;   The text after "Case-" is the iButton serial number. The text after "SerialNum1 = " is the human-readable name you
;   want to give that iButton. Edit this block of 'Case' statements to give your iButtons names. For example, to name
;   an iButton D1234567890000000 as "Site 2 Air Temperature", your case statement would be:
;
;  		Case-D1234567890000000:
;   			SerialNum1 = Site 2 Air Temperature
;   			Break
;
;   Delete any case statements that you don't need any more.

#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; #Warn  ; Enable warnings to assist with detecting common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

global DebugOn = 0
FileCounter = 1
RegexForSerialNumber = "Logger serial number:","(.*?)"
RegexForDateStamp = "Date/time logger downloaded:",(\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2})
RegexForHeaderInfo = TDHC Downloader|data exported|Timezone|TDHC Manager
OverwriteCount = 0
SectionCount = 0
FilesCreated = 0

if (%0% == 0)
{
    MsgBox, 16, iButton Logger needs files, You didn't provide any files to iButton Logger.`r`n`r`nYou need to drag-and-drop .csv or .txt files onto this program.
    ExitApp
}

Loop, %0%  ; For each file that is dropped onto the compiled executable:
{
	FilePath := %A_Index%	
	FileNum = %A_Index%
	
	SerialNum := ""
	SerialNum1 := ""
	DateStamp := ""
	DateStamp1 := ""
	SectionText := ""
    
    Loop, Read, %FilePath%
    {
        if (StrLen(A_LoopReadLine) == 0 OR RegExMatch(A_LoopReadLine, RegexForHeaderInfo) != 0)
        {
            ; Debug("Skipping a blank line or TDHC header information at line #" . A_Index)
            continue
        }
        else
        {
            ; These lines are now part of the logged data.
            ; The boundary between each set of logged data is delimited by: "Date/time logger downloaded:"
            if (InStr(A_LoopReadLine, "Date/time logger downloaded:", true) != 0)
            {
                Debug("A new section was detected at line #" . A_Index)
                Debug("SectionText character length is " . StrLen(SectionText))
                
                SectionCount++
                
                if (StrLen(SectionText) != 0)
                {
                    ; The first time this loop runs for each file, SectionText is initialised as empty.
                    ; If it is not empty, this means that the script has looped through the first section of the output and has encountered a new section.
                    ; The old section therefore needs to be output to a file.
                    
                    WriteToFile()
                }
                
                SerialNum := ""
                SerialNum1 := ""
                DateStamp := ""
                DateStamp1 := ""
            	
            	; Replace all of SectionText with this line, because it's the first line of a new section.
            	SectionText = %A_LoopReadLine%
                SectionText .= "`r`n"
            	
            	Debug("SectionText contents:`r`n`r`n" . SectionText)
            	
            	; Retrieve the datestamp.
    			if (RegExMatch(A_LoopReadLine, RegexForDateStamp) != 0)
    			{
    			    RegExMatch(A_LoopReadLine, RegexForDateStamp, DateStamp)
    			}
    			
    			Debug("DateStamp1: " . DateStamp1)
            }
            else
            {
                ; This line is part of a section of data.
                
            	; These regexes need to be checked twice because if RegExMatch finds nothing, it blanks the output variable.
                if (RegExMatch(A_LoopReadLine, RegexForSerialNumber) != 0)
                {
                    RegExMatch(A_LoopReadLine, RegexForSerialNumber, SerialNum)
                }
                
                Debug("SerialNum1: " . SerialNum1)
                
                SectionText .= A_LoopReadLine
                SectionText .= "`r`n"
            }
        }
    }
    
    ; This second call to WriteToFile() makes sure that even the last section of the output is split out.
	WriteToFile()
}


; =============================================================
; USER FEEDBACK
; =============================================================

if (%0% > 1)
{
    FilesExplanation = iButton Splitter found %SectionCount% logging sections in your file.
}
else
{
    FilesExplanation = iButton Splitter found %SectionCount% logging sections in your %0% files.
}

if (OverwriteCount != 0)
{
    FilesCreated -= OverwriteCount
    OverwriteExplanation = 
    ( LTrim
    It generated %FilesCreated% new files and overwrote %OverwriteCount% existing files.
    
    If these files didn't exist before, it means that %OverwriteCount% of the logging sections were duplicated (based on serial number and date of download).
    )
}
else
{
    OverwriteExplanation = It generated %FilesCreated% new files.
}

MsgBox, 64, iButton Splitter is finished!,
(
%FilesExplanation%

%OverwriteExplanation%

The files can be found in the 'iButton Splitter output' directory.
)

Debug(MsgBoxText)
{
	if DebugOn
	{
		WinSet, AlwaysOnTop, Off
		
		MsgBox,, Debug, %MsgBoxText%
		
		WinSet, AlwaysOnTop, On
	}
}

; =============================================================
; FUNCTION DEFINITIONS
; =============================================================

WriteToFile()
{
	global
	if (StrLen(SerialNum1) == 0)
	{
		SerialNum1 = "File %FileNum%"
	}
	if (StrLen(DateStamp1) == 0)
	{
		FormatTime, DateStamp1,, yyyy-MM-ddThhmmss
	}
	
	; Reformat date output to something close to ISO 8601.
	StringReplace, DateStamp1, DateStamp1, /, -, All
	StringReplace, DateStamp1, DateStamp1, %A_Space%, T, All
	StringReplace, DateStamp1, DateStamp1, :, , All
	
	
	; The generated files will be added to the 'iButton Splitter output/' directory.
	IfNotExist, iButton Splitter output
	{
		FileCreateDir, iButton Splitter output
	}
	
	; https://autohotkey.com/board/topic/18276-switchcase-statement-for-autohotkey/#entry119766
    If IsLabel("Case-" . SerialNum1)
    Loop 1 {
        Goto Case-%SerialNum1%
		Case-C200000038AFD421:
			SerialNum1 = BIL-BPA Air
			Break
		Case-1200000038A54021:
			SerialNum1 = BIL-BPA Soil
			Break
		Case-C50000003AAECD21:
			SerialNum1 = BLM-MN Air
			Break
		Case-0500000038801E21:
			SerialNum1 = BLM-MN Soil
			Break
		Case-B900000038B59E21:
			SerialNum1 = BOW-BM Air
			Break
		Case-59000000389FB021:
			SerialNum1 = BOW-BM Soil
			Break
		Case-AA000000387C7B21:
			SerialNum1 = GRO-CTR Air
			Break
		Case-BB00000038BA0A21:
			SerialNum1 = GRO-CTR Soil
			Break
		Case-C600000038ADC021:
			SerialNum1 = HWH-HH Air
			Break
		Case-D10000003894BB21:
			SerialNum1 = HWH-HH Soil
			Break
		Case-100000003A65D921:
			SerialNum1 = KUR-BUR Air
			Break
		Case-1A00000038AB9221:
			SerialNum1 = KUR-BUR Soil
			Break
		Case-080000003864A421:
			SerialNum1 = LAW-BR Air
			Break
		Case-71000000387CCF21:
			SerialNum1 = LAW-BR Soil
			Break
		Case-1E00000038BA2421:
			SerialNum1 = LAW-HAL Air
			Break
		Case-F500000038B1C221:
			SerialNum1 = LAW-HAL Soil
			Break
		Case-F7000000387F7521:
			SerialNum1 = LEU-SL Air
			Break
		Case-A000000038A8F321:
			SerialNum1 = LEU-SL Soil
			Break
		Case-A70000003860B121:
			SerialNum1 = MBK-MB Air
			Break
		Case-1400000038A57521:
			SerialNum1 = MBK-MB Soil
			Break
		Case-72000000386B9F21:
			SerialNum1 = MED-EL Air
			Break
		Case-7900000038B56821:
			SerialNum1 = MED-EL Soil
			Break
		Case-E500000038B42721:
			SerialNum1 = WIN-WB Air
			Break
		Case-9700000038877E21:
			SerialNum1 = WIN-WB Soil
			Break
		Case-99000000389B2221:
			SerialNum1 = BIL-BPA Air
			Break
		Case-1300000038732021:
			SerialNum1 = BIL-BPA Soil
			Break
		Case-4900000038B29621:
			SerialNum1 = BLM-MN Air
			Break
		Case-5700000038649221:
			SerialNum1 = BLM-MN Soil
			Break
		Case-570000003860F621:
			SerialNum1 = BOW-BM Air
			Break
		Case-8C00000038A50521:
			SerialNum1 = BOW-BM Soil
			Break
		Case-780000003876FC21:
			SerialNum1 = GRO-CTR Air
			Break
		Case-E900000038A86821:
			SerialNum1 = GRO-CTR Soil
			Break
		Case-5000000038841321:
			SerialNum1 = HWH-HH Air
			Break
		Case-6500000038B59A21:
			SerialNum1 = HWH-HH Soil
			Break
		Case-C100000038AB2621:
			SerialNum1 = KUR-BUR Air
			Break
		Case-D7000000387B3821:
			SerialNum1 = KUR-BUR Soil
			Break
		Case-8D0000003A991E21:
			SerialNum1 = LAW-BR Air
			Break
		Case-AA000000388B8C21:
			SerialNum1 = LAW-BR Soil
			Break
		Case-F800000038723C21:
			SerialNum1 = LAW-HAL Air
			Break
		Case-6200000038914521:
			SerialNum1 = LAW-HAL Soil
			Break
		Case-4800000038B9F021:
			SerialNum1 = LEU-SL Air
			Break
		Case-030000003891BB21:
			SerialNum1 = LEU-SL Soil
			Break
		Case-AE00000038783921:
			SerialNum1 = MBK-MB Air
			Break
		Case-CC00000038A55721:
			SerialNum1 = MBK-MB Soil
			Break
		Case-28000000388A2221:
			SerialNum1 = MED-EL Air
			Break
		Case-4200000038B24C21:
			SerialNum1 = MED-EL Soil
			Break
		Case-74000000389B1221:
			SerialNum1 = WIN-WB Air
			Break
		Case-D800000038AF1321:
			SerialNum1 = WIN-WB Soil
			Break
    }
	
	DestinationFile := "iButton Splitter output\" . SerialNum1 . " " . DateStamp1 . ".csv"
	
	IfExist, %DestinationFile%
	{
	    FileDelete, %DestinationFile%
	    OverwriteCount++
	}
	
	FileAppend, %SectionText%, %DestinationFile%
	
	SerialNum := ""
	SerialNum1 := ""
	DateStamp := ""
	DateStamp1 := ""
	
	FilesCreated++
}